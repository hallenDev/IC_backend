use ic_cdk_macros::query;
use types::{HttpRequest, HttpResponse, NobleId};
use http_request::{extract_route, Route, build_response};

use crate::{read_state, RuntimeState};

#[query]
fn http_request(request: HttpRequest) -> HttpResponse {
    fn get_avatar(since: Option<NobleId>, state: &RuntimeState) -> HttpResponse {
        if since.is_none() {
            return HttpResponse::not_found();
        }
        if let Some(user) = state.data.users.get(since.unwrap()) {
            if user.photo.len() == 0 {
                return HttpResponse::not_found();
            }
            build_response(user.photo.clone(), "image/jpeg")
        } else {
            HttpResponse::not_found()
        }
        // let vec = vec![	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 
        // 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x1D, 0x08, 0x06, 0x00, 0x00, 0x00, 0xB0, 0xBA, 0xAC, 
        // 0x4B, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00, 
        // 0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC, 0x61, 0x05, 0x00, 0x00, 
        // 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0E, 0xC3, 0x00, 0x00, 0x0E, 0xC3, 0x01, 0xC7, 
        // 0x6F, 0xA8, 0x64, 0x00, 0x00, 0x04, 0xA4, 0x49, 0x44, 0x41, 0x54, 0x48, 0x4B, 0xED, 0x55, 0x5B, 
        // 0x6C, 0x54, 0x55, 0x14, 0xF5, 0xCF, 0xC4, 0x62, 0xC4, 0x76, 0x68, 0x4B, 0xDB, 0x79, 0xDC, 0x4E, 
        // 0x67, 0xA6, 0x9D, 0xCE, 0x13, 0x25, 0x60, 0x42, 0xD1, 0xD4, 0x98, 0x60, 0xB5, 0x52, 0x15, 0x8D, 
        // 0x31, 0x05, 0x8C, 0xF5, 0x5D, 0x35, 0x26, 0x48, 0x40, 0x09, 0x62, 0x30, 0xFE, 0x10, 0x0D, 0x8D, 
        // 0xD1, 0x88, 0x18, 0x9F, 0xE1, 0x21, 0xA8, 0x54, 0xA0, 0x50, 0x10, 0x0A, 0x48, 0xDF, 0xD5, 0x82, 
        // 0x56, 0x44, 0x11, 0x04, 0x79, 0xF8, 0xA8, 0x36, 0x8A, 0x9D, 0xB9, 0x77, 0x6E, 0x67, 0xDA, 0x59, 
        // 0xAE, 0x73, 0x6E, 0xEF, 0xD8, 0x99, 0x16, 0xFD, 0x91, 0xF8, 0xE3, 0xC7, 0xCA, 0x7D, 0x9D, 0xB3, 
        // 0xD6, 0xDE, 0x6B, 0xEF, 0x7D, 0xEE, 0x25, 0x05, 0x56, 0x05, 0x17, 0x13, 0xFF, 0x0B, 0xFC, 0x23, 
        // 0xFE, 0x3B, 0x81, 0x22, 0x9B, 0x81, 0x89, 0xBE, 0x65, 0xC2, 0x6A, 0x57, 0x50, 0x78, 0x81, 0xB5, 
        // 0x13, 0x0A, 0x88, 0x0D, 0xE6, 0x7D, 0x45, 0x58, 0xC1, 0xB2, 0xDA, 0x62, 0x6C, 0x5A, 0x51, 0x82, 
        // 0xFD, 0x0D, 0x6E, 0xB4, 0xBD, 0xEC, 0xC1, 0xFE, 0xD5, 0x2E, 0xAC, 0x5F, 0x56, 0x82, 0x45, 0x77, 
        // 0x3A, 0x31, 0xDD, 0x37, 0xF1, 0x3E, 0x13, 0xE3, 0x04, 0xCC, 0xA8, 0x05, 0x71, 0xE3, 0x33, 0x4E, 
        // 0x44, 0x76, 0x78, 0xA0, 0xED, 0x2B, 0x43, 0xEC, 0x60, 0x39, 0x62, 0x6D, 0x44, 0xFB, 0xE8, 0xF5, 
        // 0xA0, 0x17, 0x5A, 0x4B, 0x19, 0x7E, 0xDF, 0xEA, 0xC1, 0x3B, 0x4F, 0x3A, 0x11, 0x2C, 0x35, 0xF6, 
        // 0x65, 0x8A, 0xA4, 0x09, 0x98, 0xE4, 0xF5, 0xD5, 0x0A, 0x22, 0x5B, 0x5C, 0x24, 0xF6, 0x42, 0xEF, 
        // 0xF0, 0x21, 0x4A, 0xA8, 0x5D, 0x3E, 0x68, 0x3D, 0xC4, 0xA7, 0xC6, 0x55, 0x3C, 0x8B, 0xF7, 0xB1, 
        // 0x8E, 0x72, 0x29, 0xD4, 0xBF, 0xDE, 0x85, 0x79, 0xD7, 0x3A, 0xE4, 0xFE, 0xB1, 0x22, 0x29, 0x01, 
        // 0xF3, 0x65, 0xFD, 0x2D, 0x0A, 0xD4, 0x46, 0x37, 0x62, 0xAD, 0xE5, 0x88, 0xB6, 0x93, 0x80, 0x64, 
        // 0x43, 0x87, 0xFD, 0x18, 0xFA, 0x82, 0xF8, 0x52, 0x20, 0x60, 0x5C, 0xC5, 0xF3, 0x21, 0xBF, 0xFC, 
        // 0x1E, 0x69, 0xE3, 0xBA, 0x4F, 0xBC, 0x50, 0x19, 0x54, 0x4D, 0x45, 0x3A, 0x5F, 0x5A, 0x06, 0xB3, 
        // 0x42, 0x0A, 0x06, 0x37, 0xBB, 0xA4, 0x1D, 0x2A, 0x23, 0xD3, 0x3F, 0xF3, 0x21, 0xDE, 0x17, 0x40, 
        // 0xE2, 0x68, 0x00, 0xF1, 0x6F, 0x02, 0x18, 0x3E, 0x11, 0x4C, 0x41, 0x3E, 0x7F, 0x1D, 0x80, 0xFE, 
        // 0xB9, 0x5F, 0xAE, 0x93, 0xC1, 0x1C, 0xF0, 0xE2, 0xD4, 0xEB, 0xC5, 0x70, 0x3B, 0xED, 0x92, 0x4F, 
        // 0x14, 0x3E, 0x4D, 0xE0, 0x83, 0x25, 0xC5, 0xD0, 0x76, 0x97, 0xCA, 0xC5, 0x3A, 0xAD, 0x48, 0x92, 
        // 0x58, 0xED, 0xF3, 0x43, 0x23, 0x19, 0x7E, 0x08, 0x63, 0xF8, 0x54, 0x10, 0x23, 0xDF, 0x87, 0x78, 
        // 0x0D, 0x01, 0xE7, 0x42, 0x38, 0xDF, 0xE7, 0xC3, 0xC8, 0xB1, 0x20, 0x12, 0xCC, 0x4A, 0xAC, 0x17, 
        // 0x99, 0x68, 0xCD, 0x1E, 0xAC, 0x5A, 0x58, 0x24, 0xF9, 0x44, 0x16, 0x29, 0x81, 0xB0, 0xD7, 0x81, 
        // 0x5F, 0x37, 0x30, 0x7A, 0x5A, 0xA3, 0xD1, 0xDF, 0x61, 0x46, 0x3E, 0xD0, 0x5D, 0x8E, 0xE5, 0xF7, 
        // 0x14, 0xA0, 0xAE, 0xCA, 0x82, 0xB3, 0x9D, 0xE5, 0x92, 0x34, 0xCE, 0xE8, 0xF1, 0x53, 0x18, 0x9D, 
        // 0xEF, 0xBB, 0x31, 0xBF, 0xD2, 0x82, 0x86, 0xC5, 0x85, 0x48, 0x7E, 0x1B, 0x84, 0x4E, 0xBB, 0xB4, 
        // 0x4E, 0x66, 0xC1, 0xEC, 0x8F, 0xBE, 0x62, 0x85, 0xCD, 0x66, 0xD4, 0x23, 0x25, 0x50, 0x77, 0x23, 
        // 0xBD, 0x6F, 0xF2, 0x40, 0x65, 0x97, 0xA8, 0xDD, 0x8C, 0x9E, 0x51, 0xEE, 0x7D, 0xD3, 0x89, 0xEA, 
        // 0x70, 0x36, 0x66, 0xDA, 0xB3, 0xB0, 0x6E, 0x95, 0x1D, 0xF8, 0x6D, 0x1A, 0x62, 0xC7, 0x0D, 0x81, 
        // 0xA5, 0xF3, 0xF3, 0x71, 0x73, 0x20, 0x1B, 0x95, 0xBE, 0x49, 0xE8, 0x67, 0x20, 0x22, 0x5B, 0x51, 
        // 0x8F, 0x58, 0x87, 0x1F, 0xD1, 0x46, 0x05, 0x37, 0x5C, 0x55, 0x98, 0x2E, 0xF0, 0xDC, 0x82, 0x51, 
        // 0x7B, 0x44, 0x67, 0xD0, 0x53, 0x30, 0xD2, 0x93, 0x07, 0xCA, 0x70, 0x3D, 0x09, 0xAE, 0x71, 0x66, 
        // 0xA1, 0x97, 0xED, 0x88, 0x9F, 0xC3, 0xD0, 0x85, 0x40, 0x7F, 0x18, 0x6F, 0x3D, 0x6F, 0x43, 0x69, 
        // 0xF6, 0xA5, 0x78, 0xE4, 0x36, 0x0B, 0xE2, 0x7C, 0x27, 0xEA, 0x24, 0x6A, 0xA1, 0x8A, 0x8E, 0x6B, 
        // 0x2A, 0xC1, 0x03, 0x73, 0xA6, 0xA6, 0x0B, 0xBC, 0xF4, 0x90, 0x02, 0x6D, 0x4F, 0x99, 0x14, 0x10, 
        // 0xDD, 0x11, 0x67, 0x01, 0x85, 0x25, 0x27, 0x58, 0xB8, 0x23, 0xBB, 0x4A, 0xE5, 0xBD, 0xA8, 0x81, 
        // 0x40, 0xF2, 0x74, 0x08, 0x89, 0x93, 0x41, 0xF4, 0x6C, 0x71, 0x63, 0xE0, 0x30, 0x83, 0x39, 0x4B, 
        // 0xEB, 0xBE, 0xA2, 0x00, 0xF7, 0x45, 0x99, 0x81, 0xBA, 0x93, 0x43, 0x58, 0x93, 0x97, 0x2E, 0xB0, 
        // 0xFA, 0x7E, 0x0A, 0x7C, 0x3C, 0x2A, 0xC0, 0xB6, 0x4C, 0x50, 0x20, 0xF1, 0x1D, 0xA3, 0x25, 0x31, 
        // 0x7E, 0x0C, 0x4B, 0x42, 0x51, 0x60, 0xA3, 0xC8, 0xC6, 0xBD, 0xB0, 0x0A, 0x67, 0x28, 0xC6, 0x75, 
        // 0x32, 0x83, 0x5E, 0x43, 0x20, 0xBA, 0xC3, 0x89, 0x27, 0xAA, 0x33, 0x04, 0x9E, 0xBE, 0x8B, 0x02, 
        // 0xCD, 0xA3, 0x1D, 0xC4, 0x85, 0x09, 0x46, 0x34, 0x2C, 0x04, 0x68, 0x87, 0x29, 0x10, 0xE7, 0xF3, 
        // 0x10, 0x21, 0xAE, 0x52, 0xC0, 0xFC, 0x46, 0x8B, 0xE2, 0x47, 0x46, 0x2D, 0xEA, 0xF4, 0x23, 0xF2, 
        // 0x91, 0x1D, 0x77, 0xCF, 0xCE, 0x10, 0xB8, 0x75, 0x36, 0x8B, 0xBC, 0xCD, 0x0D, 0x8D, 0xAD, 0xA6, 
        // 0x8B, 0xE1, 0x62, 0x7B, 0x8E, 0x70, 0xE3, 0xE6, 0x06, 0x07, 0xFA, 0x28, 0x8C, 0x5F, 0xA6, 0xC9, 
        // 0x22, 0xA7, 0xC0, 0xCC, 0x76, 0xB2, 0xE7, 0x5B, 0x37, 0xBA, 0x00, 0x5A, 0x16, 0xE3, 0x3C, 0x88, 
        // 0x22, 0xEB, 0xCC, 0x60, 0xE0, 0xDD, 0x5C, 0x4C, 0x2F, 0xB3, 0xA6, 0x0B, 0x38, 0x1C, 0x0A, 0x8E, 
        // 0xAD, 0x29, 0x91, 0xC3, 0x22, 0xDB, 0x8D, 0x59, 0x24, 0x29, 0xD0, 0xF2, 0xB6, 0x13, 0x35, 0x33, 
        // 0xAF, 0x40, 0xDD, 0x4D, 0x39, 0x78, 0x71, 0x51, 0x21, 0xD6, 0x3E, 0x6B, 0xC5, 0xCA, 0x87, 0xA7, 
        // 0x62, 0x5E, 0xC5, 0x64, 0x3C, 0x38, 0xD7, 0x82, 0xD3, 0x9C, 0xE0, 0x24, 0xE7, 0x44, 0xEF, 0x35, 
        // 0x8E, 0x0E, 0xAD, 0xA5, 0x14, 0xBB, 0x9F, 0x9A, 0x2C, 0x39, 0xC7, 0x0D, 0xDA, 0xCA, 0x5A, 0x87, 
        // 0x6C, 0xD5, 0x48, 0x2B, 0x33, 0x10, 0xD1, 0xB0, 0x68, 0x49, 0x5A, 0x31, 0xC0, 0x21, 0x5A, 0xBB, 
        // 0xC2, 0x8A, 0x47, 0x6F, 0xB7, 0xE0, 0xDE, 0xAA, 0x1C, 0x2C, 0xAE, 0xCD, 0x45, 0xD3, 0x9A, 0x62, 
        // 0x80, 0x56, 0x25, 0xD9, 0x6D, 0x31, 0x71, 0x64, 0x74, 0xF1, 0x68, 0xE9, 0x08, 0xE2, 0x8F, 0x8D, 
        // 0x79, 0x58, 0x70, 0x5D, 0xAE, 0xE4, 0x4B, 0x1B, 0x34, 0xF9, 0x82, 0x8A, 0xBD, 0x2F, 0xD8, 0xA1, 
        // 0xED, 0xF5, 0x62, 0x90, 0x56, 0x0D, 0x91, 0x58, 0x6C, 0x4E, 0xB2, 0xE0, 0xC9, 0x73, 0xF4, 0x5B, 
        // 0x14, 0x9C, 0x45, 0x15, 0x53, 0x9D, 0xE4, 0x55, 0x9C, 0x49, 0xFA, 0x21, 0x06, 0xC2, 0x39, 0x88, 
        // 0xB4, 0x07, 0x11, 0xD9, 0x66, 0xC7, 0x7B, 0xF5, 0x59, 0x92, 0xCB, 0xFC, 0x3F, 0xA4, 0x04, 0xCC, 
        // 0x93, 0xF4, 0x6A, 0xAF, 0x15, 0xC7, 0x5F, 0x2D, 0xA2, 0x08, 0x3B, 0xAA, 0x9D, 0x1D, 0x21, 0xEC, 
        // 0x62, 0x36, 0xE2, 0x14, 0x15, 0x62, 0x3A, 0x3B, 0x4C, 0x23, 0xE9, 0x5F, 0xA7, 0x2A, 0xDB, 0xB2, 
        // 0x33, 0x80, 0xC8, 0x56, 0x1B, 0xF6, 0x2D, 0xBD, 0x0C, 0x8A, 0xC3, 0x98, 0xE0, 0x71, 0x02, 0x02, 
        // 0xE6, 0x09, 0xE8, 0x77, 0xD9, 0xD0, 0xBC, 0x3C, 0x1F, 0xD1, 0xED, 0x8A, 0x3C, 0x25, 0xF5, 0xAE, 
        // 0x00, 0xB4, 0x6E, 0x12, 0x75, 0xF3, 0x6C, 0x12, 0xE8, 0x09, 0x92, 0x9C, 0xBE, 0xB3, 0x63, 0xD4, 
        // 0x3D, 0x2E, 0x9C, 0x5F, 0x97, 0x83, 0x37, 0xEE, 0x9B, 0x44, 0x07, 0x0C, 0xF2, 0xB1, 0x7F, 0xC2, 
        // 0x34, 0x01, 0x01, 0x53, 0x44, 0x60, 0x61, 0x65, 0x1E, 0x85, 0xA6, 0xA0, 0x7F, 0x43, 0x01, 0x22, 
        // 0xDB, 0xED, 0x50, 0x9B, 0x8B, 0xA1, 0xEE, 0x72, 0x22, 0xDA, 0x64, 0xC7, 0xE0, 0x87, 0x05, 0x38, 
        // 0xF3, 0xDA, 0x95, 0xD8, 0xF4, 0xD8, 0xE5, 0xA8, 0x9E, 0x61, 0x4C, 0xAD, 0x40, 0xE6, 0x6F, 0x76, 
        // 0x9C, 0x80, 0x80, 0x58, 0x34, 0xF6, 0x1F, 0x1B, 0xF6, 0x58, 0x71, 0xC7, 0xAC, 0x7C, 0x3C, 0x5E, 
        // 0x35, 0x05, 0x4B, 0xE6, 0x66, 0xA3, 0x7E, 0x8E, 0x05, 0x35, 0x33, 0xF2, 0xE1, 0x2B, 0xB1, 0x5D, 
        // 0x70, 0x8F, 0x89, 0x09, 0x05, 0x4C, 0x88, 0x6C, 0x26, 0xDA, 0x34, 0x16, 0x82, 0x38, 0x33, 0xEA, 
        // 0xB1, 0xF8, 0x5B, 0x81, 0x7F, 0x03, 0x17, 0x59, 0x40, 0xC1, 0x9F, 0xA4, 0xAE, 0x67, 0x5B, 0xC7, 
        // 0x96, 0x01, 0x99, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82];
        // build_response(vec, "image/jpeg")
    }
    match extract_route(&request.url) {
        Route::Avatar(noble_id) => read_state(|state| get_avatar(noble_id, state)),
        _ => HttpResponse::not_found(),
    }
}